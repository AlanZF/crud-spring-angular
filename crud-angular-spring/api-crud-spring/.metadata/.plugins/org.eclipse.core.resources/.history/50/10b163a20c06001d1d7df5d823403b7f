package com.alansf.crud.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.alansf.crud.model.Usuario;
import com.alansf.crud.service.UserService;

import lombok.AllArgsConstructor;

@RestController
@RequestMapping("/api")
@AllArgsConstructor
public class UserController {
	
	private final UserService service;
	
	/* Criar um usuário (Retorna 201 para sucesso / 400 para erro) */
	@PostMapping("/create")
	public ResponseEntity<Usuario> createUser(@RequestBody Usuario usuario) {
		service.createUser(usuario);
		return ResponseEntity.status(HttpStatus.CREATED).body(usuario);
	}
	
	/* Listar todos os usuários (Retorna 200 sempre) */
	@GetMapping("/list")
	public ResponseEntity<List<Usuario>> listAllUsers() {
		return ResponseEntity.status(HttpStatus.OK).body(service.listAllUsers());
	}
	
	/* Atualizar um usuário (Retorna 204 para sucesso / 400 para usuário inexistente) */
	@PutMapping("/put/{id}")
	public ResponseEntity<Usuario> updateUser(@RequestBody Usuario usuario, 
			@PathVariable Integer id) {
		Optional<Usuario> optUsuario = service.findById(id);
		
		Usuario us = optUsuario.get();
		us.setNome(usuario.getNome());
		us.setIdade(usuario.getIdade());
		us.setEmail(usuario.getEmail());
		
		service.updateUser(us);
		return ResponseEntity.status(HttpStatus.NO_CONTENT).body(us);
	}
	
	/* Deletar um usuário (Retorna 204 para sucesso / 400 para id inexistente) */
	@DeleteMapping("/delete/{id}")
	public void deleteById(@PathVariable Integer id) {
		service.deleteById(id);
		ResponseEntity.status(HttpStatus.NO_CONTENT);
	}

}
